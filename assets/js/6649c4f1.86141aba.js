"use strict";(self.webpackChunkmbdb_docs=self.webpackChunkmbdb_docs||[]).push([[7364],{2912:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var s=t(7624),n=t(2172);const o={},a="Value error",l={id:"datamodel/reusable_elements/value_error",title:"Value error",description:"lower",source:"@site/docs/datamodel/reusable_elements/value_error.md",sourceDirName:"datamodel/reusable_elements",slug:"/datamodel/reusable_elements/value_error",permalink:"/mbdb-docs/docs/datamodel/reusable_elements/value_error",draft:!1,unlisted:!1,editUrl:"https://github.com/Molecular-Biophysics-Database/mbdb-docs/tree/main/docs/datamodel/reusable_elements/value_error.md",tags:[],version:"current",frontMatter:{},sidebar:"dataModelSidebar",previous:{title:"Temperature",permalink:"/mbdb-docs/docs/datamodel/reusable_elements/temperature"},next:{title:"Data model - MST",permalink:"/mbdb-docs/docs/category/data-model---mst"}},d={},i=[{value:"lower",id:"lower",level:2},{value:"upper",id:"upper",level:2},{value:"is_relative",id:"is_relative",level:2}];function u(e){const r={h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,n.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"value-error",children:"Value error"}),"\n",(0,s.jsx)(r.h2,{id:"lower",children:"lower"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": The lower error, i.e. the number that should be added to the value to get the upper bound of the 95 % confidence interval. The same unit as the value being described is assumed. If relative errors are provided, please provide it in fractional form (e.g. 0.01 for 1 %) ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(r.strong,{children:"Required"}),": yes ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(r.strong,{children:"Type"}),": number (float) ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)(r.h2,{id:"upper",children:"upper"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": The upper error, i.e. the number that should be added to the value to get the upper bound of the 95 % confidence interval. The same unit as the value being described is assumed. If relative errors are provided, please provide it in fractional form (e.g. 0.01 for 1 %) ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(r.strong,{children:"Required"}),": yes ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(r.strong,{children:"Type"}),": number (float) ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)(r.h2,{id:"is_relative",children:"is_relative"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": True if the error values should be interpreted as relative errors (fractional uncertainty) ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(r.strong,{children:"Required"}),": yes ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(r.strong,{children:"Type"}),": bool ",(0,s.jsx)("br",{})]})]})}function c(e={}){const{wrapper:r}={...(0,n.M)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},2172:(e,r,t)=>{t.d(r,{I:()=>l,M:()=>a});var s=t(1504);const n={},o=s.createContext(n);function a(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);